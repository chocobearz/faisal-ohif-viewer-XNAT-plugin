buildscript {
    ext {
        vXnat = '1.7.6'
    }
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
            name 'XNAT Release Repository'
        }
        maven {
            url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
            name 'XNAT Snapshot Repository'
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.8.0"
        classpath "io.franzbecker:gradle-lombok:1.10"
    }
}

group 'org.nrg.xnatx'
version '2.2.0-SNAPSHOT'

apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'xnat-data-builder'

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// Use this configuration to put dependencies into the fat jar
configurations {
    compile.extendsFrom(compileAndInclude)
}

task fatJar(type: Jar) {
    zip64 true
    baseName = project.name
    from { configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'http://dcm4che.org/maven2'
        name 'dcm4che Maven Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-release'
        name 'XNAT Release Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot'
        name 'XNAT Snapshot Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-release-local'
        name 'XNAT External Release (Local) Repository'
    }
    maven {
        url 'https://nrgxnat.jfrog.io/nrgxnat/ext-snapshot-local'
        name 'XNAT External Snapshot (Local) Repository'
    }
    maven {
        url 'https://jitpack.io'
    }

}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation("org.nrg.xnat:web") { transitive = false }
    implementation("org.nrg.xnat:xnat-data-models") { transitive = false }
    implementation("org.nrg.xdat:core") { transitive = false }
    implementation("org.nrg:automation") { transitive = false }
    implementation("org.nrg:dicom-xnat-sop") { transitive = false }
    implementation("org.nrg:framework")
    implementation("org.nrg:prefs") { transitive = false }

    implementation("turbine:turbine") { transitive = false }
    implementation("org.apache.velocity:velocity") { transitive = false }
    implementation ('stratum:stratum') { transitive = false }

    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework:spring-context"
    implementation "org.springframework.security:spring-security-core"

    implementation "io.springfox:springfox-swagger2"
    implementation "commons-io:commons-io"
    implementation "commons-codec:commons-codec"
    implementation "org.apache.commons:commons-lang3"
    implementation("io.projectreactor:reactor-core:2.0.2.RELEASE") { transitive = false }
    implementation("io.projectreactor:reactor-bus:2.0.2.RELEASE") { transitive = false }

    implementation("org.slf4j:slf4j-api") { transitive = false }
    implementation("org.slf4j:slf4j-log4j12") { transitive = false }
    implementation("log4j:log4j") { transitive = false }
    implementation("dcm4che:dcm4che-core") { transitive = false }
    implementation("com.google.code.gson:gson") { transitive = false }

    // Guava
    implementation("com.google.guava:guava:20.0") { transitive = false }
    // Jackson
    def vJackson = '2.9.2'
    implementation("com.fasterxml.jackson.core:jackson-annotations") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-core") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-databind") { transitive = false }
    // Logback
    implementation("ch.qos.logback:logback-classic") { transitive = false }
    implementation("ch.qos.logback:logback-core") { transitive = false }
     // EtherJ
    def vEtherJ = '1.1.3-SNAPSHOT'
    compileAndInclude("icr.etherj:etherj-core:${vEtherJ}") { transitive = false }

    testCompile group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.21'


    testImplementation "junit:junit"
}

// This tells the compiler where to find source code. This isn't required in a
// standard build, but the XNAT data builder generates code from XNAT data-type
// schemas that the compiler needs to know about.
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/xnat-generated/src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'build/xnat-generated/src/main/resources'
        }
    }
}
